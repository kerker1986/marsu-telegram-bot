// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum StatusEnum {
  start
  check_testing
  create_testing
  create_question
  create_answer
  passing_testing
  pick_answer
  pick_correct_answer
  save_testing
}

model User {
  id               String           @id
  firstName        String
  lastName         String
  userName         String
  status           StatusEnum       @default(start)
  telegramId       Int
  testings         Testing[]
  testingsPassings TestingPassing[]
  editingTestingId String?
  passingTestingId String?
}

model Testing {
  id                String           @id
  title             String
  owner             User             @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId           String
  questions         Question[]
  editingQuestionId String?
  testingPassings   TestingPassing[]
}

model Question {
  id              String    @id
  body            String
  answers         Answers[]
  testing         Testing   @relation(fields: [testingId], references: [id], onDelete: Cascade)
  testingId       String
  editingAnswerId String?
}

model Answers {
  id             String          @id
  body           String
  correct        Boolean
  question       Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId     String
  passingAnswers PassingAnswer[]
}

model TestingPassing {
  id                String          @id
  userId            String
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  testingId         String
  testing           Testing         @relation(fields: [testingId], references: [id], onDelete: Cascade)
  passingAnswers    PassingAnswer[]
  currentQuestionId String
}

model PassingAnswer {
  answer           Answers         @relation(fields: [answerId], references: [id], onDelete: Cascade)
  answerId         String
  testingPassing   TestingPassing? @relation(fields: [testingPassingId], references: [id], onDelete: Cascade)
  testingPassingId String

  @@id([answerId, testingPassingId])
}
